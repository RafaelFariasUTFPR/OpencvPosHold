{"config":{"lang":["pt"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Apresenta\u00e7\u00e3o","text":"<p>Esta \u00e9 a documenta\u00e7\u00e3o do projeto Desenvolvimento de ve\u00edculo aut\u00f4nomo n\u00e3o tripulado para realiza\u00e7\u00e3o de miss\u00f5es de monitoriza\u00e7\u00e3o de par\u00e2metros topogr\u00e1ficos e de qualidade da \u00e1gua de rios e lagos, uma colabora\u00e7\u00e3o entre a Associa\u00e7\u00e3o de Pesquisa Desenvolvimento e Tecnologia Hefestus e a Universidade Tecnol\u00f3gica Federal do Paran\u00e1 - UTFPR campus Toledo. </p> <p>Esta documenta\u00e7\u00e3o gera automaticamente um arquivo em PDF de seu conte\u00fado, este pode ser baixado aqui.</p> <p>Gostou dessa documenta\u00e7\u00e3o? visite o reposit\u00f3rio ZRafaF/ReadTheDocksBase para mais informa\u00e7\u00f5es .</p> <p>Utilize as Tabs a cima para navegar pelo site.</p>"},{"location":"setup/","title":"Setup","text":"<p>Este projeto assume que voc\u00ea possui a vers\u00e3o mais recente de Python3, de PIP e GIT, caso precise instalar por favor visite https://www.python.org/downloads/.</p> <p>Este projeto foi testado e desenvolvido com a vers\u00e3o <code>Python 3.10.x</code></p>"},{"location":"setup/#clonando-o-repositorio","title":"Clonando o reposit\u00f3rio","text":"Bash<pre><code>git clone https://github.com/ZRafaF/OpencvPosHold\n\ncd OpencvPosHold\n</code></pre>"},{"location":"setup/#criando-ambiente-virtual","title":"Criando ambiente virtual","text":"<p>Esse passo n\u00e3o \u00e9 obrigat\u00f3rio, mas sim recomendado</p> Bash<pre><code>python3 -m pip install --user virtualenv\n\npython -m venv venv\n</code></pre> <p>Com isso um ambiente virtual chamado <code>venv</code> ser\u00e1 criado no diret\u00f3rio do projeto.</p> <p>Para ativar:</p> <p>Ativa\u00e7\u00e3o no Windows</p> <pre><code>venv/Scripts/activate\n</code></pre> <p>ou</p> <p>Ativa\u00e7\u00e3o no Linux</p> <pre><code>source venv/bin/activate\n</code></pre>"},{"location":"setup/#instalando-dependencias","title":"Instalando depend\u00eancias","text":"<p>Primeiro ser\u00e1 necess\u00e1rio instalar o OpenCV, neste caso temos 2 op\u00e7\u00f5es de instala\u00e7\u00e3o, utilizar um gerenciador de pacotes ou compilar da fonte.</p> <p>Em sistemas embarcados, como a Raspberry PI, \u00e9 recomendado que este seja compilado da fonte</p> <p>Warning</p> <p>Devido a evolu\u00e7\u00e3o do projeto com o tempo a vers\u00e3o do OpenCV que est\u00e1 sendo utilizada \u00e9 a <code>opencv_contrib</code>, entretanto tecnicamente n\u00e3o estamos utilizando nenhum pacote da vers\u00e3o contrib. Logo TALVEZ seja poss\u00edvel utilizar apenas a vers\u00e3o padr\u00e3o do OpenCV.</p>"},{"location":"setup/#opencv","title":"OpenCV","text":"<p>A vers\u00e3o que estaremos instalando \u00e9 a <code>opencv_contrib</code>, para informa\u00e7\u00f5es sobre a instala\u00e7\u00e3o da vers\u00e3o padr\u00e3o por favor verificar a documenta\u00e7\u00e3o.</p> <p>Utilizando um gerenciador de pacotes</p> <p><pre><code>pip install opencv-contrib-python\n</code></pre> Caso deseje a op\u00e7\u00e3o headless pode usar <pre><code>pip install opencv-contrib-python-headless\n</code></pre></p> <p>ou</p> <p>Compilando da fonte</p> <ol> <li> <p>Seguir o tutorial de instala\u00e7\u00e3o (cerca de 8 horas na RaspberryPi 3 ) aqui</p> </li> <li> <p>Linkar o modulo aqui, v\u00e1 na categoria Sym-link your OpenCV 4 on the Raspberry Pi</p> </li> </ol> <p>Por fim ser\u00e1 necess\u00e1rio linkar-lo ao projeto:</p> Bash<pre><code>cd /usr/local/lib/python3.9/site-packages/cv2/python-3.9\n\nsudo mv cv2.cpython-39-arm-linux-gnueabihf.so cv2.so\n\ncd &lt;OpencvPosHold&gt;\n\nln -s /usr/local/lib/python3.9/site-packages/cv2/python-3.9/\n\ncv2.so cv2.so\n</code></pre>"},{"location":"setup/#outros","title":"Outros","text":"Bash<pre><code>pip install numpy\n\nsudo pip install pupil-apriltags\n\nsudo pip install dronekit\n\npip install pymavlink\n\npip install argparse\n\npip install imutils\n\npip install picamera\n</code></pre>"},{"location":"hardware/","title":"Hardware","text":"<p>Esta documenta\u00e7\u00e3o fara um overview do hardware utilizado, tamb\u00e9m dar\u00e1 instru\u00e7\u00f5es e informa\u00e7\u00f5es para auxiliar na reprodu\u00e7\u00e3o dos resultados.</p>"},{"location":"hardware/controladora_de_voo/","title":"Controladora de voo","text":""},{"location":"hardware/controladora_de_voo/#mini-pix","title":"Mini Pix","text":"<p>A controladora escolhida foi a Mini Pix V1.0. Este modelo \u00e9 baseado na arquitetura da PixHawk.</p> <p>Warning</p> <p>Cuidado na escolha da controladora, este modelo foi escolhido ap\u00f3s estudo profundo do firmware que seria usado o ArduPilot. E a sua documenta\u00e7\u00e3o conta com um aviso sobre esse modelo de controladora, falando basicamente:</p> <p>Algumas vers\u00f5es dessa controladora n\u00e3o s\u00e3o recomendadas devido a uma possivel incompatibilidade.</p> <p>\u201cV1.0\u201d e \u201cV1.2\u201d provavelmente funcionam, \u201cV1.0 II\u201d e \u201cV1.1\u201d definitivamente n\u00e3o funcionam.</p> <p>Essa documenta\u00e7\u00e3o pode ser encontrada aqui.</p> <p></p>"},{"location":"hardware/controladora_de_voo/#ardupilot","title":"ArduPilot","text":"<p>O firmware ArduPilot foi escolhido devido a sua flexibilidade e facilidade de integra\u00e7\u00e3o com os outros componentes requeridos pelo projeto.</p>"},{"location":"hardware/frame/","title":"Frame","text":"<p>Durante todo o desenvolvimento sempre foram utilizados 2 tipos de frames.</p>"},{"location":"hardware/frame/#frame-de-validacao","title":"Frame de valida\u00e7\u00e3o","text":"<ul> <li> <p>Utilizado para testar tecnologias;</p> </li> <li> <p>F\u00e1cil acesso para facilitar a itera\u00e7\u00e3o e modifica\u00e7\u00e3o de hardware;</p> </li> <li> <p>Foi utilizado o frame s500 da dji. Uma plataforma um pouco defasada a este ponto, entretanto com bastante material dispon\u00edvel.</p> </li> </ul> <p></p>"},{"location":"hardware/frame/#frame-final","title":"Frame final","text":"<p>Ao decorrer do projeto o frame aprova d'\u00e1gua foi alterado por diversas vezes. Os not\u00e1veis ser\u00e3o apresentados a seguir.</p>"},{"location":"hardware/frame/#quadh2o","title":"QuadH2o","text":"<p>O projeto teve como seu frame inicial o QuadH2o, entretanto devido a sua descontinua\u00e7\u00e3o se tornou invi\u00e1vel para o projeto.</p> <p></p>"},{"location":"hardware/frame/#custom","title":"Custom","text":"<p>Esse foi o frame final, o desenho foi feito utilizando o Fusion 360 e seu <code>.step</code> est\u00e1 dispon\u00edvel em EM BREVE.</p> <p>Seu corpo principal foi impresso em uma impressora 3d e canibalizou os bra\u00e7os e trem de pouso da s500.</p> <p></p>"},{"location":"hardware/frame/#desenvolvimento","title":"Desenvolvimento","text":"<p>Este capitulo descrever\u00e1 o processo de desenvolvimento e fabrica\u00e7\u00e3o do frame customizado, para que terceiros sejam capazes de reproduzi-lo.</p>"},{"location":"sobre/","title":"Sobre","text":"<p>Esta p\u00e1gina contem informa\u00e7\u00f5es adicionais e as licen\u00e7as de softwares de terceiros.</p>"},{"location":"software/","title":"software","text":"<p>Esta documenta\u00e7\u00e3o fara um overview do software utilizado, tamb\u00e9m dar\u00e1 instru\u00e7\u00f5es e informa\u00e7\u00f5es para auxiliar na reprodu\u00e7\u00e3o dos resultados.</p>"},{"location":"software/api/api/","title":"api","text":""},{"location":"utilizacao/","title":"Utiliza\u00e7\u00e3o","text":"<p>Aqui ser\u00e3o apresentados os m\u00e9todos de utiliza\u00e7\u00e3o deste software</p>"},{"location":"utilizacao/calibracaoCamera/","title":"Calibra\u00e7\u00e3o da c\u00e2mera","text":"<p>Para a aquisi\u00e7\u00e3o de leituras e estima\u00e7\u00e3o de dist\u00e2ncias \u00e9 imprescind\u00edvel uma boa calibra\u00e7\u00e3o da c\u00e2mera.</p> <p>A camera utilizada neste projeto foi a Raspberry Pi Camera Module 2.</p> <p>Este projeto possui scripts de Python para calibrar a c\u00e2mera. O processo de calibra\u00e7\u00e3o segue os seguinte passos:</p> <ol> <li><code>CaptureImg.py</code>: Este scripts ir\u00e1 tirar fotos e armazenar as mesmas.</li> <li><code>aprilCalibrateCam.py</code>: Este script realizar\u00e1 os c\u00e1lculos e ir\u00e1 gerar uma matriz de distor\u00e7\u00e3o. </li> </ol> <p>Esses scripts foram derivados do reposit\u00f3rio Basic-Augmented-reality-course-opencv, por favor o visite e deem as atribui\u00e7\u00f5es necess\u00e1rias.</p>"},{"location":"utilizacao/calibracaoCamera/#capturando-imagens","title":"Capturando imagens","text":"<p>Siga os passos a seguir para capturar as imagens:</p> <ol> <li> <p>Imprima o chessboard pattern.</p> <p></p> </li> <li> <p>Deixe plano fixando-o \u00e0 alguma superf\u00edcie.</p> <p>Por exemplo um peda\u00e7o de madeira, isopor ou qualquer outro material plano.</p> </li> <li> <p>Coloque as dimens\u00f5es no script <code>CaptureImg.py</code> Python<pre><code># Dimens\u00e3o do tabuleiro\nCHESS_BOARD_DIM = (9, 6)\n</code></pre></p> <p>Note que o numero come\u00e7a em 0, ou seja, se o pattern possui 10 x 7, voc\u00ea colocar\u00e1 <code>CHESS_BOARD_DIM = (9, 6)</code>.</p> </li> <li> <p>Inicie o script e pressione <code>s</code> para salvar uma foto, ou <code>q</code> para finalizar o programa.</p> <ul> <li>\u00c9 importante que sejam tiradas fotos com o pattern em posi\u00e7\u00f5es e inclina\u00e7\u00f5es diferentes, principalmente nas bordas do campo de vis\u00e3o da c\u00e2mera;</li> <li>Para um bom resultado recomendo tirar pelo menos 30 fotos diferentes.</li> </ul> </li> </ol> <p>Ao finalizar o programa voc\u00ea ter\u00e1 um diret\u00f3rio chamado <code>/images/</code> na root do projeto.</p>"},{"location":"utilizacao/calibracaoCamera/#gerando-matriz","title":"Gerando matriz","text":"<p>Neste passo ser\u00e1 gerado a matriz de calibra\u00e7\u00e3o ela ir\u00e1 gerar uma matriz que voc\u00ea dever\u00e1 copiar e coloca-lo no script principal.</p> <p>Siga as instru\u00e7\u00f5es a seguir para realizar a calibra\u00e7\u00e3o com sucesso.</p>"},{"location":"utilizacao/calibracaoCamera/#setup","title":"Setup","text":"<ul> <li> <p>Abra o arquivo <code>aprilCalibrateCam.py</code> em seu editor de preferencia.</p> </li> <li> <p>O primeiro passo \u00e9 colocar os par\u00e2metros do chessboard pattern. Altere os seguintes par\u00e2metros:     Python<pre><code>CHESS_BOARD_DIM = (9, 6)\nSQUARE_SIZE = 26  # - mm\n</code></pre></p> <ul> <li><code>CHESS_BOARD_DIM</code> dever\u00e1 conter os mesmos valores dos colocados no item anterior.</li> <li><code>SQUARE_SIZE</code> dever\u00e1 conter o tamanho em <code>mm</code> dos quadrados do seu pattern.</li> </ul> </li> </ul>"},{"location":"utilizacao/calibracaoCamera/#apuracao","title":"Apura\u00e7\u00e3o","text":"<ul> <li> <p>Ap\u00f3s o setup das constantes o pr\u00f3ximo passo ser\u00e1 apurar as imagens. Ao iniciar o arquivo ser\u00e3o apresentadas as imagens que foram capturadas com as linhas de calibra\u00e7\u00e3o.</p> <p>Exemplo:</p> <p></p> <p>O exemplo acima \u00e9 uma base de como as suas imagens devem estar, sem linhas cruzadas e com todos os cantos identificados.</p> <ul> <li> <p>O script ir\u00e1 iterar sobre todas as imagens no diret\u00f3rio <code>/images/</code></p> </li> <li> <p>Voc\u00ea devera pressionar <code>s</code> para aceitar a imagem, <code>q</code> para encerrar ou qualquer outra letra para rejeitar.</p> </li> </ul> <p>Ao fim ser\u00e1 impresso na tela uma matriz como a seguinte:  <pre><code>cam_params = (643.2857240774916, 644.3167085172134, 336.7788196007684, 231.26676197077208)\n</code></pre></p> <p>Voc\u00ea dever\u00e1 copiar essa linha para adiciona-la  ao script principal posteriormente.</p> <p>Warning</p> <p>O plano inicial era gerar um arquivo <code>.npz</code> e guardar a matriz l\u00e1, entretanto essa feature n\u00e3o foi implementada ainda.</p> </li> </ul>"},{"location":"utilizacao/calibracaoCamera/#aplicando-calibracao","title":"Aplicando calibra\u00e7\u00e3o","text":"<p>Para aplicar a calibra\u00e7\u00e3o siga os passo a seguir:</p> <ol> <li> <p>Abra o script principal <code>2aprilTagDetect.py</code></p> </li> <li> <p>Altere a vari\u00e1vel <code>cam_params</code> com seus valores pr\u00f3prios     Python<pre><code># Parametros gerados do script aprilCalibrateCam.py\ncam_params = (\n630.8669379442165,\n630.3123204518172,\n335.75042566981904,\n227.83332282734318,\n)\n</code></pre></p> </li> </ol>"},{"location":"utilizacao/missao/","title":"Miss\u00e3o","text":"<p>Aqui ser\u00e1 apresentado como utilizar o software em uma miss\u00e3o real</p>"},{"location":"utilizacao/simulacao/","title":"Simula\u00e7\u00e3o","text":"<p>Aqui ser\u00e1 apresentado como executar simula\u00e7\u00f5es de miss\u00f5es.</p>"}]}